12. to add a file to the staging area:
$ git add file_name.extension

12. if the previous change has been committed and everything is up to date, the staging area will be a snapshot of the last commit in the repository. If you make any changes to a file in the working directory, the staging area won’t be updated until you git add the changes. Even after git adding the changes to the staging area, you still need to commit to the repository through git commit

13. to compare any differences between files in the working directory and the staging area:
$ git diff (without any arguments)

14. to compare any differences between files in the staging area and the repository:
$ git diff —-staged

15. to compare any differences between two commits:
$ git diff most_recent_commit_number previous_commit_number

16. to discard any changes to either/both the working directory and/or the staging area:
$ git reset —hard

17. to check which branch you are on:
$ git branch

18. to create a new branch:
$ git branch new_branch_name

19. to select the branch you want to commit to:
$ git checkout branch_name

20. remote branch is a branch that was created by someone else, not you

21. to merge two branches:
$ git merge branch_one_name branch_two_name

22. git merge will also include the currently checked-out branch in the merged version. So if you have branch1 checked out, and you run git merge branch2 branch3, the merged version will combine branch1 as well as branch2 and branch3. That’s because the branch1 label will update after you make the merge commit, so it’s unlikely that you didn’t want the changes from branch1 included in the merge. For this reason, you should always checkout one of the two branches you’re planning on merging before doing the merge. Which one you should check out depends on which branch label you want to point to the new commit.

Since the checked-out branch is always included in the merge, you may have guessed that when you are merging two branches, you don't need to specify both of them as arguments to git merge on the command line. If you want to merge branch2 into branch1, you can simply git checkout branch1 and then type git merge branch2. The only reason to type git merge branch1 branch2 is if it helps you keep better mental track of which branches you are merging.

Also, since the two branches are merged, the order in which they are typed into the command line does not matter. The key is to remember that git merge always merges all the specified branches into the currently checked out branch, creating a new commit for that branch.

23. to show what changes were introduced to a commit compared to its parent:
$ git show commit_ID

24. to delete the label of a branch:
$ git branch -d branch_name
